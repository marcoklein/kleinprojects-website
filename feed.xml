<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kleinprojects</title>
  <subtitle>Personal Projects and Blog by Marco Klein</subtitle>
  <link href="https://kleinprojects.com/feed.xml" rel="self"/>
  <link href="https://kleinprojects.com/"/>
  <updated>2022-08-21T00:00:00Z</updated>
  <id>https://kleinprojects.com/</id>
  <author>
    <name>Marco Klein</name>
    <email>marco.klein94@gmail.com</email>
  </author>
  
  <entry>
    <title>Incremental User Interface Development</title>
    <link href="https://kleinprojects.com/incremental-user-interface-development/"/>
    <updated>2022-08-21T00:00:00Z</updated>
    <id>https://kleinprojects.com/incremental-user-interface-development/</id>
    <content type="html">&lt;p&gt;Developing a cool user interface can be really hard. It starts with the &amp;quot;what does the user &lt;em&gt;actually&lt;/em&gt; wants to do?&amp;quot;-challenge and involves questions like &amp;quot;where does does the user wants to access the application?&amp;quot;. The answer is often that neither you nor your user really knows what they want.&lt;/p&gt;
&lt;p&gt;Recently, I had to deal quite often with this &amp;quot;user interface challenge&amp;quot; and how to develop and effective approach to develop a cool app that solves exactly the problem a user is facing. Therefore, I tried to take a step back and observe my approach to frontend development.&lt;/p&gt;
&lt;p&gt;Initially, I observed, that I would spend tons of time looking and reading through new UI frameworks that would fit my need. And then there is a difference between the (1) &lt;em&gt;UI&lt;/em&gt; framework and the (2) &lt;em&gt;frontend framework&lt;/em&gt;. (1) is a library for the actual styling, like Bootstrap, Evergreen, Onsen UI, ... and (2) is a library that helps with the implementation of logic and state, like Angular, Vue, or React.&lt;/p&gt;
&lt;p&gt;So, for the &lt;em&gt;frontend framework&lt;/em&gt; I would just pick whatever which is mostly React right now. The challenge is (1), the &lt;em&gt;UI&lt;/em&gt; framework because there are sooo many different frameworks and lots of advantages and disadvantages. E.g. if you want to build a hybrid app you might use Onsen UI, if you use React components only you might want to use Evergreen, or Material UI, there are old frameworks that still persist like Bootstrap. Simply too many to evaluate all options before even designing.&lt;/p&gt;
&lt;p&gt;So how could I avoid spending all that time reading through pros and cons for individual UI frameworks? The answer is simple:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do not use a UI framework :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To be more precise:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do not incorporate a UI framework if you are still exploring what your application should actually do.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What does this mean?&lt;/p&gt;
&lt;p&gt;It means starting with the most basic components that HTML has to offer. If you need an input, use &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. If you need a card use a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with some &lt;code&gt;border&lt;/code&gt; property set.&lt;/p&gt;
&lt;p&gt;With this approach I am able to push the UI framework decision to the future as long as possible and can rather ship working prototypes that I can quickly evaluate with end users to build a better product and eventually choose the UI framework that fits.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using the Raspberry Pi as a Syncthing Server</title>
    <link href="https://kleinprojects.com/using-the-raspberry-pi-as-a-syncthing-server/"/>
    <updated>2022-05-08T00:00:00Z</updated>
    <id>https://kleinprojects.com/using-the-raspberry-pi-as-a-syncthing-server/</id>
    <content type="html">&lt;p&gt;Today I reworked my Obsidian infrastructure setup to use Syncthing (&lt;a rel=&quot;noopener&quot; class=&quot;external-link&quot; href=&quot;https://syncthing.net/&quot; target=&quot;_blank&quot;&gt;https://syncthing.net/&lt;/a&gt;) instead of GitHub so I have complete control over my data. In this post I would like to share my setup with you.&lt;/p&gt;
&lt;h2 data-heading=&quot;Raspberry Pi as Syncthing Main Server&quot;&gt;Raspberry Pi as Syncthing Main Server&lt;/h2&gt;
&lt;p&gt;&lt;/p&gt;&lt;div&gt;&lt;img style=&quot;max-width:400px !important; width:100%;&quot; class=&quot;excalidraw-svg&quot; src=&quot;https://kleinprojects.com/images/2022-05-08-2022-05-08%20Blog%20Post%20-%20Syncthing%20on%20Raspberry%20PI%202022-05-08%2018.03.53.excalidraw.md.svg&quot; /&gt;&lt;/div&gt;&lt;br /&gt;
The main idea is having the Raspberry Pi as the &lt;em&gt;main&lt;/em&gt; Syncthing server that is &lt;em&gt;always online&lt;/em&gt;. Through relay servers any other client is able to establish a connection to that main server. This is important as Syncthing would at least need two devices that it can sync files properly within real-time.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Let&#39;s dive into the technical setup.&lt;/p&gt;
&lt;h2 data-heading=&quot;Setting up the SD Card&quot;&gt;Setting up the SD Card&lt;/h2&gt;
&lt;p&gt;Download Raspbian Imager from &lt;a rel=&quot;noopener&quot; class=&quot;external-link&quot; href=&quot;https://www.raspberrypi.com/software/&quot; target=&quot;_blank&quot;&gt;https://www.raspberrypi.com/software/&lt;/a&gt;.&lt;br /&gt;
That software writes the Raspbian OS onto your SD Card. Pick &lt;em&gt;Raspberry Lite (no Desktop)&lt;/em&gt; and flash your SD Card.&lt;/p&gt;
&lt;p&gt;To automatically connect to WIFI place a &lt;code&gt;wpa_supplicant.conf&lt;/code&gt; into the SD card root folder with the following content:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;country=de
update_config=1
ctrl_interface=/var/run/wpa_supplicant
&lt;p&gt;network={
scan_ssid=1
ssid=&amp;quot;WiFi SSID&amp;quot;
psk=&amp;quot;WiFi password&amp;quot;
}
&lt;/p&gt;&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Additionally, place an empty &lt;code&gt;ssh&lt;/code&gt; file into the root. This triggers an SSH login on the first boot.&lt;/p&gt;
&lt;h2 data-heading=&quot;Connecting to the Raspberry PI&quot;&gt;Connecting to the Raspberry PI&lt;/h2&gt;
&lt;p&gt;Next, start the Raspberry with the prepared SD Card. It should automatically connect to your network.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To find the IP you might use an IP Scanner like &lt;a aria-label-position=&quot;top&quot; aria-label=&quot;https://angryip.org/&quot; rel=&quot;noopener&quot; class=&quot;external-link&quot; href=&quot;https://angryip.org/&quot; target=&quot;_blank&quot;&gt;Angry IP Scanner&lt;/a&gt; or if you have access to your router you can just see listed devices there. If this is your only raspberry pi in the network try to connecting to &lt;code&gt;raspberrypi&lt;/code&gt; as ip address.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Connect to it via SSH:&lt;/p&gt;
&lt;pre class=&quot;language-sh&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sh is-loaded&quot;&gt;ssh pi@&amp;#x3C;raspberry pi ip&gt;
&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;&lt;/pre&gt;
&lt;p&gt;Username: &lt;code&gt;pi&lt;/code&gt;&lt;br /&gt;
Password: &lt;code&gt;raspberry&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you encounter troubles just connect to a display via HDMI and see what the logs show.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After the initial login change the default password to something safe! (or better: enable SSH key authentication only - I will not discuss this here)&lt;/p&gt;
&lt;pre class=&quot;language-sh&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sh is-loaded&quot;&gt;passwd
&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;&lt;/pre&gt;
&lt;h2 data-heading=&quot;Installing Syncthing&quot;&gt;Installing Syncthing&lt;/h2&gt;
&lt;p&gt;Syncthing is available as a Debian package at &lt;a rel=&quot;noopener&quot; class=&quot;external-link&quot; href=&quot;https://apt.syncthing.net/&quot; target=&quot;_blank&quot;&gt;https://apt.syncthing.net/&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-sh&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sh is-loaded&quot;&gt;sudo curl -s -o /usr/share/keyrings/syncthing-archive-keyring.gpg https://syncthing.net/release-key.gpg
echo &quot;deb [signed-by=/usr/share/keyrings/syncthing-archive-keyring.gpg] https://apt.syncthing.net/ syncthing stable&quot; | sudo tee /etc/apt/sources.list.d/syncthing.list
sudo apt-get update
sudo apt-get install syncthing
&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;&lt;/pre&gt;
&lt;p&gt;Run Syncthing:&lt;/p&gt;
&lt;pre class=&quot;language-sh&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sh is-loaded&quot;&gt;syncthing
&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;&lt;/pre&gt;
&lt;p&gt;And note your device Id&lt;br /&gt;
This will print starting logs including the Syncthing ID of the raspberry. The line looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
[XXXXX] 2022/05/08 16:17:15 INFO: My ID: XXXXXXX-XXXXXXX-XXXXXXX-XXXXXXX-XXXXXXX-XXXXXXX-XXXXXXX-XXXXXXX
...
&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;&lt;/pre&gt;
&lt;h2 data-heading=&quot;Exposing the Syncthing Web Console&quot;&gt;Exposing the Syncthing Web Console&lt;/h2&gt;
&lt;p&gt;There is a CLI for Syncthing but it&#39;s much easier to maintain configurations via the web browser. Enable it in the &lt;code&gt;~/.config/syncthing/config.xml&lt;/code&gt; by changing the &lt;code&gt;address&lt;/code&gt; attribute to a &lt;code&gt;0.0.0.0&lt;/code&gt; value like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#x3C;gui enabled=&quot;true&quot; tls=&quot;true&quot;&gt;
 &amp;#x3C;address&gt;0.0.0.0:8384&amp;#x3C;/address&gt;
 &amp;#x3C;apikey&gt;xxxxx&amp;#x3C;/apikey&gt;
&amp;#x3C;/gui&gt;
&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;&lt;/pre&gt;
&lt;p&gt;Then, restart syncthing with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;syncthing
&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;&lt;/pre&gt;
&lt;p&gt;And access the web console at &lt;code&gt;https://&amp;#x3C;raspberry pi ip&gt;:8384&lt;/code&gt;.&lt;br /&gt;
Add a new user authentication here to avoid others within the same network of accessing your Syncthing settings. The web console will also prompt you to do this.&lt;/p&gt;
&lt;h3 data-heading=&quot;Starting Syncthing on Login&quot;&gt;Starting Syncthing on Login&lt;/h3&gt;
&lt;p&gt;To run Syncthing on startup (e.g. when the Raspberry Pi powers up), we can edit the &lt;code&gt;~/.bashrc&lt;/code&gt;file that gets executed on login of the &lt;code&gt;pi&lt;/code&gt; user:&lt;/p&gt;
&lt;pre class=&quot;language-sh&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sh is-loaded&quot;&gt;vi ~/.bashrc
&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;&lt;/pre&gt;
&lt;p&gt;and add the following line to start syncthing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ...
# Run Syncthing in detached mode (notice the &amp;#x26;)
syncthing serve &amp;#x26;
&lt;/code&gt;&lt;button class=&quot;copy-code-button&quot;&gt;Copy&lt;/button&gt;&lt;/pre&gt;
&lt;p&gt;Note that if you login into the pi user the script will always execute. You can also configure a service to run syncthing with init.d or systemd if you want a cleaner execution. The mentioned approach is very simple and sufficient for my case.&lt;/p&gt;
&lt;h2 data-heading=&quot;Conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This guide walked you through the basic setup of Syncthing on a Raspberry Pi.&lt;/p&gt;
&lt;p&gt;You can now start your Raspberry Pi to automatically run Syncthing and access the web console to manage all devices and folders.&lt;/p&gt;
&lt;p&gt;Consider adding a backup mechanism to your setup to make it even more robust.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Scoping a Hobby Project - Personal Learnings</title>
    <link href="https://kleinprojects.com/scoping-a-hobby-project-personal-learnings/"/>
    <updated>2022-04-16T00:00:00Z</updated>
    <id>https://kleinprojects.com/scoping-a-hobby-project-personal-learnings/</id>
    <content type="html">&lt;p&gt;This post is meant to be a small self-reflection for a personal note taking application called Noteberry.&lt;/p&gt;
&lt;p&gt;Noteberry is a hobby project I have been working on during evenings or weekends for the past months (think I started 1.5 years ago in around December 2020). It should have been &lt;em&gt;&quot;a toolbox for working with block-based linked markdown notes&quot;&lt;/em&gt; (&lt;a aria-label-position=&quot;top&quot; aria-label=&quot;https://github.com/marcoklein/noteberry&quot; rel=&quot;noopener&quot; class=&quot;external-link&quot; href=&quot;https://github.com/marcoklein/noteberry&quot; target=&quot;_blank&quot;&gt;GitHub Repo&lt;/a&gt;). It was meant to be an application to deal with my local markdown notes.&lt;/p&gt;
&lt;p&gt;However, I escalated a little too much in scope and built first of all an editor with VIM support to support easy editing. Then I continued developing a parser for markdown with wikilinks (&lt;code&gt;[[wikilink]]&lt;/code&gt;) and so on... I realised, that there were already applications that would implement exactly the thing that I was trying to develop (like &lt;a aria-label-position=&quot;top&quot; aria-label=&quot;http://logseq.com&quot; rel=&quot;noopener&quot; class=&quot;external-link&quot; href=&quot;http://logseq.com/&quot; target=&quot;_blank&quot;&gt;LogSeq&lt;/a&gt;, &lt;a aria-label-position=&quot;top&quot; aria-label=&quot;http://obsidian.md&quot; rel=&quot;noopener&quot; class=&quot;external-link&quot; href=&quot;http://obsidian.md/&quot; target=&quot;_blank&quot;&gt;Obsidian&lt;/a&gt; or &lt;a aria-label-position=&quot;top&quot; aria-label=&quot;https://github.com/srid/neuron&quot; rel=&quot;noopener&quot; class=&quot;external-link&quot; href=&quot;https://github.com/srid/neuron&quot; target=&quot;_blank&quot;&gt;Neuron&lt;/a&gt;. And I also realised that they have either spent a very long time developing it or have a whole team behind it.&lt;/p&gt;
&lt;p&gt;Recreating any of these applications wasn&#39;t my first intention when starting the project. I just wanted to deal with my local markdown files. However, over the past couple of months scope was increasing unexpectedly because my goal for Noteberry was not clear.&lt;/p&gt;
&lt;p&gt;Despite of this, I learned a lot of technical things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Work with syntax parsing and build a parser with &lt;a aria-label-position=&quot;top&quot; aria-label=&quot;https://remark.js.org/&quot; rel=&quot;noopener&quot; class=&quot;external-link&quot; href=&quot;https://remark.js.org/&quot; target=&quot;_blank&quot;&gt;Remark&lt;/a&gt; to parse markdown files (published a small article about it &lt;a aria-label-position=&quot;top&quot; aria-label=&quot;https://kleinprojects.com/linking-markdown-notes-with-typescript/&quot; rel=&quot;noopener&quot; class=&quot;external-link&quot; href=&quot;https://kleinprojects.com/linking-markdown-notes-with-typescript/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Develop an editor extension with &lt;a aria-label-position=&quot;top&quot; aria-label=&quot;https://codemirror.net/6/&quot; rel=&quot;noopener&quot; class=&quot;external-link&quot; href=&quot;https://codemirror.net/6/&quot; target=&quot;_blank&quot;&gt;CodeMirror 6&lt;/a&gt; to create a text editor with VIM support&lt;/li&gt;
&lt;li&gt;Setup a monorepo with &lt;a aria-label-position=&quot;top&quot; aria-label=&quot;https://lerna.js.org/&quot; rel=&quot;noopener&quot; class=&quot;external-link&quot; href=&quot;https://lerna.js.org/&quot; target=&quot;_blank&quot;&gt;Lerna&lt;/a&gt; to manage and publish all packages from one repository&lt;/li&gt;
&lt;li&gt;Setup a working CI/CD Flow with &lt;a aria-label-position=&quot;top&quot; aria-label=&quot;https://pages.github.com/&quot; rel=&quot;noopener&quot; class=&quot;external-link&quot; href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot;&gt;GitHub Pages&lt;/a&gt; to test publish without any more effort&lt;/li&gt;
&lt;li&gt;Learn how the new NodeJS &lt;a aria-label-position=&quot;top&quot; aria-label=&quot;https://nodejs.org/api/esm.html&quot; rel=&quot;noopener&quot; class=&quot;external-link&quot; href=&quot;https://nodejs.org/api/esm.html&quot; target=&quot;_blank&quot;&gt;Ecma Script Modules (ESM)&lt;/a&gt; work with &lt;a aria-label-position=&quot;top&quot; aria-label=&quot;https://www.typescriptlang.org/&quot; rel=&quot;noopener&quot; class=&quot;external-link&quot; href=&quot;https://www.typescriptlang.org/&quot; target=&quot;_blank&quot;&gt;TypeScript&lt;/a&gt; to write modern and fast code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nonetheless, I realised that I have not produced something that I can actually &lt;strong&gt;use&lt;/strong&gt;. I have rather deepened my knowledge about the above topics.&lt;/p&gt;
&lt;p&gt;For my future projects I am taking this question with me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the problem that I am trying to solve?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And then will not directly solve it but rather look for existing solutions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What solutions already exist to solve it?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I was neither aware of Obsidian nor LogSeq when starting out but the thing that I was trying to built was just too large to solve it with a one person show in a timely manner, so:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can I produce results in a timely manner?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With these questions I should have a good foundation for scoping future (hobby) projects.&lt;/p&gt;
&lt;p&gt;Nonetheless, development and implementing stuff should also be fun and I will not only create projects to solve specific issues. I will also keep that in mind :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How Daily Notes Work in Networked Note Taking</title>
    <link href="https://kleinprojects.com/how-daily-notes-work-in-networked-note-taking/"/>
    <updated>2022-04-09T00:00:00Z</updated>
    <id>https://kleinprojects.com/how-daily-notes-work-in-networked-note-taking/</id>
    <content type="html">&lt;p&gt;A daily note makes it simple to track thoughts, meetings, and events during a specific day.&lt;br /&gt;
If you create a link for a &lt;em&gt;topic&lt;/em&gt; that you mention in multiple dailies you will get time based relationships like the follow picture illustrates:&lt;br /&gt;
&lt;/p&gt;&lt;div&gt;&lt;img style=&quot;max-width:300px !important; width:100%;&quot; class=&quot;excalidraw-svg&quot; src=&quot;https://kleinprojects.com/images/2022-04-09-How%20Daily%20Notes%20work%20in%20a%20networked%20note%20taking%20tool%202022-04-07%2021.29.24.excalidraw.md.svg&quot; /&gt;&lt;/div&gt;&lt;br /&gt;
&lt;em&gt;Note that in this case there is a daily note for each day and one topic note that would get referenced with a &lt;code&gt;[[Topic]]&lt;/code&gt; link.&lt;/em&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;However, there will not be only one topic that you write down during a day but you will write notes regarding various topics like the following illustration depicts:&lt;br /&gt;
&lt;/p&gt;&lt;div&gt;&lt;img style=&quot;max-width:300px !important; width:100%;&quot; class=&quot;excalidraw-svg&quot; src=&quot;https://kleinprojects.com/images/2022-04-09-How%20Daily%20Notes%20work%20in%20a%20networked%20note%20taking%20tool%202022-04-07%2022.13.36.excalidraw.md.svg&quot; /&gt;&lt;/div&gt;&lt;br /&gt;
This means: all three days mention Topic A, the 4th and the 5th link Topic B, and the 5th and 6th reference Topic C.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Let&#39;s see how this approach looks from different angles.&lt;br /&gt;
If we select Topic B we would see this:&lt;br /&gt;
&lt;/p&gt;&lt;div&gt;&lt;img style=&quot;max-width:200px !important; width:100%;&quot; class=&quot;excalidraw-svg&quot; src=&quot;https://kleinprojects.com/images/2022-04-09-How%20Daily%20Notes%20work%20in%20a%20networked%20note%20taking%20tool%202022-04-07%2022.29.20.excalidraw.md.svg&quot; /&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Selecting the 4th of April would show something like this:&lt;br /&gt;
&lt;/p&gt;&lt;div&gt;&lt;img style=&quot;max-width:200px !important; width:100%;&quot; class=&quot;excalidraw-svg&quot; src=&quot;https://kleinprojects.com/images/2022-04-09-How%20Daily%20Notes%20work%20in%20a%20networked%20note%20taking%20tool%202022-04-07%2022.31.50.excalidraw.md.svg&quot; /&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;In a conclusion, with a daily you can keep track of your information flow over time. Specific topics evolve over time which is inherently depicted by daily notes that reference and contribute to new topics.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Linking Markdown Notes with TypeScript</title>
    <link href="https://kleinprojects.com/linking-markdown-notes-with-typescript/"/>
    <updated>2021-12-19T00:00:00Z</updated>
    <id>https://kleinprojects.com/linking-markdown-notes-with-typescript/</id>
    <content type="html">&lt;p&gt;Linked note taking brings the advantage of connecting knowledge in an intuitive, connected matter as opposed to traditional, section-based note taking approaches. This approach gained traction through new networked note taking applications like &lt;a href=&quot;https://roamresearch.com/&quot;&gt;RoamResearch&lt;/a&gt;, &lt;a href=&quot;https://obsidian.md/&quot;&gt;Obsidian&lt;/a&gt;, and &lt;a href=&quot;https://logseq.com/&quot;&gt;Logseq&lt;/a&gt;. They pursue the concept of &lt;em&gt;linked&lt;/em&gt; notes - that means that instead of dividing notes into sections, they are all in a flat directory and define structure by relations to other notes.&lt;/p&gt;
&lt;p&gt;In this post we are using Markdown to stick to an easily editable text format without vendor lock-in. We could even drop these plain files into a Git folder for effortless backups and versioning. For linking markdown notes we are going to use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Help:Link&quot;&gt;widely adopted Wikilink format&lt;/a&gt; (e.g. &lt;code&gt;[[wikilink]]&lt;/code&gt;). These connect arbitrary documents without the need of specifying the exact location.&lt;/p&gt;
&lt;p&gt;I did not find too many resources and guides on how you could implement algorithms by yourself to interlink Markdown notes with the power of &lt;code&gt;[[wikilinks]]&lt;/code&gt;. That is why this post dives into an implementation to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://kleinprojects.com/linking-markdown-notes-with-typescript/#setup&quot;&gt;Setup a base project&lt;/a&gt; (&lt;a href=&quot;https://github.com/marcoklein/linked-markdown-notes&quot;&gt;Source on GitHub&lt;/a&gt;) for the implementation&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kleinprojects.com/linking-markdown-notes-with-typescript/#reading-markdown-files&quot;&gt;Read markdown files&lt;/a&gt; from your folder to have data to analyze&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kleinprojects.com/linking-markdown-notes-with-typescript/#parsing-markdown-files&quot;&gt;Parse the files&lt;/a&gt; to find all wikilinks for further mapping&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kleinprojects.com/linking-markdown-notes-with-typescript/#extracting-document-titles&quot;&gt;Extract titles&lt;/a&gt; to that we can map our links&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kleinprojects.com/linking-markdown-notes-with-typescript/#building-master-mappings&quot;&gt;Build a master mapping table&lt;/a&gt; to quickly interlink our notes&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kleinprojects.com/linking-markdown-notes-with-typescript/#mapping-links-to-document-paths&quot;&gt;Map links to document paths&lt;/a&gt; for an example on using our master mappings&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I assume knowledge of TypeScript but it is not necessary in order to grasp the concept and process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Objective: Building a basis to link any markdown notes through a mapping data structure that gives you direct access to &lt;em&gt;path&lt;/em&gt;, &lt;em&gt;title&lt;/em&gt;, and &lt;em&gt;links&lt;/em&gt; of documents.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;setup&quot; tabindex=&quot;-1&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;At first, we are going to setup our environment and base project. Ensure you have a recent installation of &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;. If not head over to their &lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;download page&lt;/a&gt; grab the latest version and install it.
We use the package manager &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;yarn&lt;/a&gt; for dependency management. However, you could also install everything via &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; if preferred. So, go ahead and install yarn.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --global &lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s create a new folder for our project and initialize an empty yarn project with default options.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You could also find all code on &lt;a href=&quot;https://github.com/marcoklein/linked-markdown-notes&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; linked-markdown-notes&lt;br /&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; linked-markdown-notes&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; init -y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add required dependencies for running the project.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; --dev typescript ts-node @types/node @types/fs-extra&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; remark-parse remark-wiki-link unist-util-visit-parents&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are using &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/esm-node.html&quot;&gt;ECMAScript Modules (ESM)&lt;/a&gt;, therefore add the &lt;code&gt;&amp;quot;type&amp;quot;: &amp;quot;module&amp;quot;&lt;/code&gt; option to your &lt;code&gt;package.json&lt;/code&gt; and create a &lt;code&gt;start&lt;/code&gt; script for running our project:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;linked-markdown-notes&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MIT&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;node --loader ts-node/esm src/index.js&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a new &lt;code&gt;tsconfig.json&lt;/code&gt; file for our &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; configuration:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;compilerOptions&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ESNext&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ESNext&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;moduleResolution&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;esModuleInterop&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;forceConsistentCasingInFileNames&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;strict&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;skipLibCheck&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;paths&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;remark-wiki-link&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;./typings/remark-wiki-link.d.ts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As the code base of &lt;code&gt;remark-wiki-link&lt;/code&gt; is JavaScript and the package ships no types we have to create a new type definition file and reference it in the &lt;code&gt;tsconfig.json&lt;/code&gt;.
For this we just create a new file under &lt;code&gt;typings/remark-wiki-link.d.ts&lt;/code&gt; with the content&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;remark-wiki-link&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Either use an already existing folder with markdown files or create a new &lt;code&gt;test/resources&lt;/code&gt; folder that contains some sample markdown files. In this post, all examples and code will work with the latter one. If you want to follow it, the create 4 files in that folder:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;test/resources/Dog.md&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Dog
There is a dog.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;test/resources/Cat.md&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Cat
Cat plays with [[Dog]].
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;test/resources/Farm.md&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Farm
Farm has a [[Dog]], a [[Horse]], and a [[Cow]].
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;test/resources/Home.md&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Home
Home has a [[Cat]] and [[Dog]].
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The content of the files make no real sense, but we will need these examples as a basis to test the &lt;code&gt;[[wikilinks]]&lt;/code&gt;.
Eventually, our folder structure should look this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;test/
  resources/
    Dog.md
    Cat.md
    Home.md
    Farm.md
typings/
  remark-wiki-link.d.ts
package.json
tsconfig.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;With our basic setup we are now ready to dive into the actual implementation.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;reading-markdown-files&quot; tabindex=&quot;-1&quot;&gt;Reading Markdown Files&lt;/h2&gt;
&lt;p&gt;Let&#39;s write some code for reading our files that we want to link. For that create a new file under &lt;code&gt;src/index.ts&lt;/code&gt; as application entry. Add the following function to read markdown files of a specific directory:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; fs &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;node:fs/promises&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; path &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;path&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FileSystemDocument&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  content&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/**&lt;br /&gt; * Reads all markdown files of a directory.&lt;br /&gt; *&lt;br /&gt; * @param directoryPath Directory to read.&lt;br /&gt; * @returns Path and content of markdown files within the directory.&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;readMarkdownFiles&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  directoryPath&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;FileSystemDocument&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// read files in folder&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; dirents &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readdir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;directoryPath&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; withFileTypes&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// filter files from folder&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; files &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dirents&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// only consider files that have a markdown extension&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dirent &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; dirent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;extname&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dirent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.md&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// return path of file&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dirent &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;directoryPath&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dirent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// read file contents&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; filesWithContentPromises &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; files&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filePath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;FileSystemDocument&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; filePath&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// read content of file&lt;/span&gt;&lt;br /&gt;      content&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filePath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// resolve asynchronous file loading&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filesWithContentPromises&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// call function with our test repository&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; files &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;readMarkdownFiles&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./test/resources&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// prints results&lt;/span&gt;&lt;br /&gt;files&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; path &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Read file path: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;path&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the code snippet and examine its result:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; start&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It should have printed a list of markdown files in your &lt;code&gt;test/resources&lt;/code&gt; folder:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Read &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; path: test/resources/Cat.md&lt;br /&gt;Read &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; path: test/resources/Dog.md&lt;br /&gt;Read &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; path: test/resources/Farm.md&lt;br /&gt;Read &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; path: test/resources/Home.md&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Nice. We are set with our files. Now we can really start with file parsing and linking...&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;parsing-markdown-files&quot; tabindex=&quot;-1&quot;&gt;Parsing Markdown Files&lt;/h2&gt;
&lt;p&gt;As a second step we have to find all wikilink occurrences that we can use for lining our files. Therefore, we are going to parse the Markdown content and analyze the syntax tree.&lt;/p&gt;
&lt;p&gt;We use the library &lt;a href=&quot;https://github.com/remarkjs/remark/tree/main/packages/remark-parse&quot;&gt;remark-parse&lt;/a&gt; for markdown parsing with the &lt;a href=&quot;https://github.com/landakram/remark-wiki-link&quot;&gt;remark-wiki-link&lt;/a&gt; extension for parsing wikilinks of the format &lt;code&gt;[[...]]&lt;/code&gt;. We start with the creation of a &lt;code&gt;WikiLinkNode&lt;/code&gt; type that we need for the &lt;code&gt;remark-wiki-plugin&lt;/code&gt;. Afterwards, we we create a &lt;code&gt;SyntaxTree&lt;/code&gt; type we can use as the root type of our parser. Additionally, let us import &lt;code&gt;visit&lt;/code&gt; - an utility to traverse the syntax tree - see &lt;a href=&quot;https://unifiedjs.com/learn/recipe/tree-traversal-typescript/&quot;&gt;tree traversal article in TypeScript&lt;/a&gt; for more information about that.&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ... other imports&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;MDAST&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;mdast&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;UNIST&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;unist&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// gonna need visit for our next function&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; visit &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;unist-util-visit&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WikiLinkNode&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;UNIST&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Node &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;wikiLink&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  value&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    alias&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    permalink&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SyntaxTree&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mdast&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Root &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; WikiLinkNode&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/syntax-tree/unist&quot;&gt;Unist&lt;/a&gt; and &lt;a href=&quot;https://github.com/syntax-tree/mdast&quot;&gt;mdast&lt;/a&gt; are syntax tree structures, which &lt;code&gt;remark-parse&lt;/code&gt; uses for parsing markdown.
In the next step, we add two more functions to parse all document links and build a mapping table from all documents and links. Let&#39;s start with a function to parse wikilinks from our syntax tree. For this we are going to use the &lt;code&gt;visit&lt;/code&gt; utility we imported in the previous snippet:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseDocumentLinks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parsedDocumentContent&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; SyntaxTree&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; documentLinks&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parsedDocumentContent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;wikiLink&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; wikiLinkNode &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; wikiLinkNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; alias &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; wikiLinkNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;alias&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// if a link contains a &quot;:&quot; the remark-wiki-link plugin would parse it as an alias&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// as we are not using the alias feature we re-construct the full link content&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// LIMITATION: this approach does not recognize links that have the same name and alias&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// e.g. name:name - keep that in mind when using this snippet&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; linkName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;wikiLinkNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;br /&gt;      value &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; alias &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;:&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; alias &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    documentLinks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;linkName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; documentLinks&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function returns an array of wikilinks that it finds in the syntax tree. Now, we can add our function for building the document to map links:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;buildDocumentsLinkMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;files&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; FileSystemDocument&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// call the unified parser&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; documentParser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;unified&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;remarkParse&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;remarkWikiLink&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// end result&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; documentLinksMap&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  files&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; content &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// parse each content and put its links into the result map&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; parsedDocumentContent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; documentParser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    documentLinksMap&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseDocumentLinks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parsedDocumentContent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; documentLinksMap&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// print the result&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Document links map: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;buildDocumentsLinkMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;files&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running our program will now yield something like this:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Read &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; path: test/resources/Cat.md&lt;br /&gt;Read &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; path: test/resources/Dog.md&lt;br /&gt;Read &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; path: test/resources/Farm.md&lt;br /&gt;Read &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; path: test/resources/Home.md&lt;br /&gt;Documents links map: &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Cat.md&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Dog&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Dog.md&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Farm.md&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Dog&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;Horse&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;Cow&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Home.md&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Cat&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;Dog&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Voilà, we successfully parsed our markdown files, extracted links, and created a mapping table. With this mapping table we can easily match documents and links. The next sections discuss how we can implement that mapping.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;extracting-document-titles&quot; tabindex=&quot;-1&quot;&gt;Extracting Document Titles&lt;/h2&gt;
&lt;p&gt;Our links have to map against some sort of name or title. In our case, we are using the document name of each file as the matching target (you could also use e.g. the first heading in you markdown file). It is only important to create a map of titles that the &lt;code&gt;documentsLinksMap&lt;/code&gt; can use for linking.
Therefore, we add a new function for extracting document titles:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;buildDocumentsTitleMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;files&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; FileSystemDocument&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; documentTitleMap&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  files&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; path &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// extract document title&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; title &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;([^\/]+)\.md$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token prism-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// verify a consistent mapping&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Could not extract title from path: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;path&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;documentTitleMap&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Title &quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;title&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; already exists for path &quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;documentTitleMap&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    documentTitleMap&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; documentTitleMap&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Documents title map: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;buildDocumentsTitleMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;files&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The regex &lt;code&gt;([^\/]+)\.md$&lt;/code&gt; returns the title of a document and the first matching group contains the title. Additionally, the function contains two additional checks to guarantee uniqueness of titles.
A run with &lt;code&gt;yarn start&lt;/code&gt; now prints:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Read &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; path: test/resources/Cat.md&lt;br /&gt;Read &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; path: test/resources/Dog.md&lt;br /&gt;Read &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; path: test/resources/Farm.md&lt;br /&gt;Read &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; path: test/resources/Home.md&lt;br /&gt;Documents links map:  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Cat.md&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Dog&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Dog.md&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Farm.md&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Dog&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;Horse&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;Cow&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Home.md&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Cat&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;Dog&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;Documents title map:  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  Cat: &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Cat.md&#39;&lt;/span&gt;,&lt;br /&gt;  Dog: &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Dog.md&#39;&lt;/span&gt;,&lt;br /&gt;  Farm: &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Farm.md&#39;&lt;/span&gt;,&lt;br /&gt;  Home: &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Home.md&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Well done, with the &lt;code&gt;documentsLinksMap&lt;/code&gt; and the &lt;code&gt;documentsTitleMap&lt;/code&gt; we can now interlink our markdown files.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;building-master-mappings&quot; tabindex=&quot;-1&quot;&gt;Building Master Mappings&lt;/h2&gt;
&lt;p&gt;You might already wonder how we could actually visualize all the links by using the mapping tables. Thus, for our final mapping we create mappings based on our two original mapping tables and combine them all! They will enable any future algorithms to directly find mappings for links.
Let us add a function that creates our master mapping tables:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;buildMasterMappings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  documentTitleToPathMap&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  documentPathToLinksMap&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// create interim mapping tables to easily map entries&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; documentPathToTitleMap&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;documentTitleToPathMap&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;documentPathToTitleMap&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; title&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; documentTitleToLinksMap&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;documentPathToLinksMap&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; links&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;// map document title to links&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;documentTitleToLinksMap&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;documentPathToTitleMap&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; links&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// return all mappings&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    documentTitleToPathMap&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    documentPathToLinksMap&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    documentPathToTitleMap&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    documentTitleToLinksMap&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;Master mappings: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;buildMasterMappings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;buildDocumentsTitleMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;files&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;buildDocumentsLinkMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;files&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A re-run of our project with &lt;code&gt;yarn start&lt;/code&gt; will now yield&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;output from above&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;Master mappings:  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  documentTitleToPathMap: &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    Cat: &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Cat.md&#39;&lt;/span&gt;,&lt;br /&gt;    Dog: &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Dog.md&#39;&lt;/span&gt;,&lt;br /&gt;    Farm: &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Farm.md&#39;&lt;/span&gt;,&lt;br /&gt;    Home: &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Home.md&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;br /&gt;  documentPathToLinksMap: &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Cat.md&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Dog&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Dog.md&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Farm.md&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Dog&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;Horse&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;Cow&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Home.md&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Cat&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;Dog&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;br /&gt;  documentPathToTitleMap: &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Cat.md&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Cat&#39;&lt;/span&gt;,&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Dog.md&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Dog&#39;&lt;/span&gt;,&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Farm.md&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Farm&#39;&lt;/span&gt;,&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Home.md&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Home&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;br /&gt;  documentTitleToLinksMap: &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    Cat: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Dog&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;br /&gt;    Dog: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;br /&gt;    Farm: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Dog&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;Horse&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;Cow&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;br /&gt;    Home: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Cat&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;Dog&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Do You see where this is getting? Hence, we got mappings into all directions with all document titles, paths, and links. Now we just have to use it.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;mapping-links-to-document-paths&quot; tabindex=&quot;-1&quot;&gt;Mapping Links to Document Paths&lt;/h2&gt;
&lt;p&gt;We could utilize these master mappings in various use cases. To look into one in particular, we implement a function to map links to the respective file path:&lt;/p&gt;
&lt;p&gt;(Note, that some links don&#39;t have a matching target document - our function considers this case as well)&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// we build a global master mapping table&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// so we can reuse it later&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; globalMasterMapping &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;buildMasterMappings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;buildDocumentsTitleMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;files&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;buildDocumentsLinkMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;files&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findDocumentPathOfLink&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  masterMapping&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ReturnType&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; buildMasterMappings&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  linkName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; linkPath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; masterMapping&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;documentTitleToPathMap&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;linkName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// return true, if the path exists&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// if false, there is no document for the link name&lt;/span&gt;&lt;br /&gt;    existing&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; linkPath &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; linkPath&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Eventually, let us print some results of that function:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;Path for link Home: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;findDocumentPathOfLink&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;globalMasterMapping&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Home&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;Path for link Farm: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;findDocumentPathOfLink&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;globalMasterMapping&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Farm&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;Path for link Farm: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;findDocumentPathOfLink&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;globalMasterMapping&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Cow&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A run with &lt;code&gt;yarn start&lt;/code&gt; now logs:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Path &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;link&lt;/span&gt; Home:  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; existing: true, path: &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Home.md&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;Path &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;link&lt;/span&gt; Farm:  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; existing: true, path: &lt;span class=&quot;token string&quot;&gt;&#39;test/resources/Farm.md&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;Path &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;link&lt;/span&gt; Farm:  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; existing: false, path: undefined &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;This case shows us how easy it is to utilize the master mapping to quickly find paths for linked notes.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;limitations-and-outlook&quot; tabindex=&quot;-1&quot;&gt;Limitations and Outlook&lt;/h2&gt;
&lt;p&gt;This post covered a basic implementation for processing linked Markdown notes. Feel free to take it as an inspiration and let me know if you do something cool with it.&lt;/p&gt;
&lt;p&gt;Finally, I want to close with some questions worth asking when looking at your map of notes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Are all notes connected with each other, or are there outsiders? This might be an indication for lost notes.&lt;/li&gt;
&lt;li&gt;What links do not have a mapping target? This would be links pointing to non-existent documents.&lt;/li&gt;
&lt;li&gt;Which links point to a specific document (also known as backlinks)?&lt;/li&gt;
&lt;li&gt;What notes are the most important ones? E.g. you could sort with the &lt;a href=&quot;https://en.wikipedia.org/wiki/PageRank&quot;&gt;PageRank Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Enjoy working with your set of networked notes.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cheers, Marco&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Find code for this article on &lt;a href=&quot;https://github.com/marcoklein/linked-markdown-notes&quot;&gt;GitHub&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Linking markdown files for better note taking</title>
    <link href="https://kleinprojects.com/linking-markdown-files-for-better-note-taking/"/>
    <updated>2021-11-28T00:00:00Z</updated>
    <id>https://kleinprojects.com/linking-markdown-files-for-better-note-taking/</id>
    <content type="html">&lt;p&gt;Currently, I am investigating approaches to work with linked notes - markdown notes in particular.
Linking notes is not a new concept but I found no application that meets my requirements to 100%. However, some applications start picking up these concepts like &lt;a href=&quot;https://obsidian.md/&quot;&gt;Obsidian&lt;/a&gt; or &lt;a href=&quot;https://roamresearch.com/&quot;&gt;Roam Research&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Inspirations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RoamResearch&lt;/li&gt;
&lt;li&gt;[[Obsidian]] &lt;a href=&quot;https://obsidian.md/&quot;&gt;https://obsidian.md/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Jermolene/TiddlyWiki5&quot;&gt;https://github.com/Jermolene/TiddlyWiki5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[[Typora Note Taking App]] &lt;a href=&quot;https://typora.io/&quot;&gt;https://typora.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[[Standard Notes]] &lt;a href=&quot;https://standardnotes.com/features&quot;&gt;https://standardnotes.com/features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Markdown backlink janitor &lt;a href=&quot;https://github.com/andymatuschak/note-link-janitor&quot;&gt;https://github.com/andymatuschak/note-link-janitor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Resolve tag clobber</title>
    <link href="https://kleinprojects.com/resolve-tag-clobber/"/>
    <updated>2021-02-08T00:00:00Z</updated>
    <id>https://kleinprojects.com/resolve-tag-clobber/</id>
    <content type="html">&lt;p&gt;If you got conflicting tags force pull the latest tags from your remote.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; pull --tags origin develop&lt;br /&gt;From github.com:name/repo&lt;br /&gt; * branch            develop    -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; FETCH_HEAD&lt;br /&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;rejected&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;        &lt;span class=&quot;token prism-number&quot;&gt;0.1&lt;/span&gt;.177    -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token prism-number&quot;&gt;0.1&lt;/span&gt;.177  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;would clobber existing tag&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;rejected&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;        &lt;span class=&quot;token prism-number&quot;&gt;0.1&lt;/span&gt;.179    -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token prism-number&quot;&gt;0.1&lt;/span&gt;.179  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;would clobber existing tag&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Resolve with&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; fetch --tags -f&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>Linux Cheat Sheet</title>
    <link href="https://kleinprojects.com/linux-cheat-sheet/"/>
    <updated>2021-01-12T00:00:00Z</updated>
    <id>https://kleinprojects.com/linux-cheat-sheet/</id>
    <content type="html">&lt;h2 id=&quot;check-kernel-version&quot; tabindex=&quot;-1&quot;&gt;Check Kernel Version&lt;/h2&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;uname&lt;/span&gt; -a&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;check-ip&quot; tabindex=&quot;-1&quot;&gt;Check IP&lt;/h2&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ifconfig&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ip&lt;/span&gt; addr show&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;check-disk-space&quot; tabindex=&quot;-1&quot;&gt;Check disk space&lt;/h2&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;df&lt;/span&gt; -ah&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;work-with-services&quot; tabindex=&quot;-1&quot;&gt;Work with services&lt;/h2&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;service-name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; status&lt;br /&gt;systemctl status &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;service-name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;check-folder-size&quot; tabindex=&quot;-1&quot;&gt;Check folder size&lt;/h2&gt;
&lt;p&gt;Disk use&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;du&lt;/span&gt; -sh &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;directory&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;check-for-open-ports&quot; tabindex=&quot;-1&quot;&gt;Check for open ports&lt;/h2&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;netstat&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;check-cpu-usage&quot; tabindex=&quot;-1&quot;&gt;Check CPU usage&lt;/h2&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ps&lt;/span&gt; aux &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;process-name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;top&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;mounting&quot; tabindex=&quot;-1&quot;&gt;Mounting&lt;/h2&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mount&lt;/span&gt; /dev/sda2 /mnt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check for existing&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;mounts&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Auto mount in file&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;/etc/fstab&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;manpages&quot; tabindex=&quot;-1&quot;&gt;Manpages&lt;/h2&gt;
&lt;p&gt;Manual pages&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;man&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;command&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;permissions&quot; tabindex=&quot;-1&quot;&gt;Permissions&lt;/h2&gt;
&lt;p&gt;Show permissions&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;stat&lt;/span&gt; file.txt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Change permissions&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# denies file read for others&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; o-r file.txt&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# read for user, read for group, deny access to others&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;r,g&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;r,o&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; file.txt&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;file-transformation&quot; tabindex=&quot;-1&quot;&gt;File Transformation&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;jq&lt;/code&gt; to transform JSON files.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; logs.json &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; jq &lt;span class=&quot;token string&quot;&gt;&#39;.[&quot;@timestamp&quot;] + &quot;   &quot; + .message&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; logs.txt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Transforms extracts timestamp and message from JSON objects and prints them into logs.txt.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Practical Vim Command Cheat Sheet</title>
    <link href="https://kleinprojects.com/practical-vim-command-cheat-sheet/"/>
    <updated>2021-01-10T00:00:00Z</updated>
    <id>https://kleinprojects.com/practical-vim-command-cheat-sheet/</id>
    <content type="html">&lt;h3 id=&quot;surround-with-brackets&quot; tabindex=&quot;-1&quot;&gt;Surround with brackets&lt;/h3&gt;
&lt;p&gt;Select with &lt;code&gt;visual mode&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Use&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;c()&amp;lt;Esc&amp;gt;P
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;visual-mode&quot; tabindex=&quot;-1&quot;&gt;Visual mode&lt;/h2&gt;
&lt;p&gt;Visual mode for lines (Visual Line mode)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;V
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Visual mode for characters&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;v
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;leave-insert-mode&quot; tabindex=&quot;-1&quot;&gt;Leave insert mode&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Ctrl-C or ESC
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;more-movements&quot; tabindex=&quot;-1&quot;&gt;More movements&lt;/h1&gt;
&lt;p&gt;Insert line above&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;O
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Insert line below&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;o
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Paste above&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;P
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Paste below&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Search&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hop through results: &lt;code&gt;n&lt;/code&gt; reverse: &lt;code&gt;N&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Go to next occurrence: &lt;code&gt;*&lt;/code&gt; reverse: &lt;code&gt;#&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;horizontal-movement&quot; tabindex=&quot;-1&quot;&gt;Horizontal Movement&lt;/h1&gt;
&lt;p&gt;Find and select character&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;f / F &amp;lt;character&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Find and not select character&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t / T &amp;lt;character&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example combo with d&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df &amp;lt;character&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Delete until &lt;code&gt;&amp;lt;character&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;delete-and-insert&quot; tabindex=&quot;-1&quot;&gt;Delete and insert&lt;/h1&gt;
&lt;p&gt;Delete character&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x / X
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Delete character and enter insert mode&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Delete line and enter insert mode&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;S
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;vertical-movement&quot; tabindex=&quot;-1&quot;&gt;Vertical Movement&lt;/h1&gt;
&lt;p&gt;Move to top&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;H
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Move to bottom&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;L
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Move to middle&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;M
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;search-and-replace&quot; tabindex=&quot;-1&quot;&gt;Search and replace&lt;/h1&gt;
&lt;p&gt;Search for all occurrences of foo and replace with bar after confirmation&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;:%s/foo/bar/gc&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;navigation&quot; tabindex=&quot;-1&quot;&gt;Navigation&lt;/h1&gt;
&lt;p&gt;Open finder&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:e &amp;lt;folder&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Jump between two last buffers&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Ctrl + ^
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Set mark with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;m &amp;lt;letter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Set global mark with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;m &amp;lt;Shift + letter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;splits&quot; tabindex=&quot;-1&quot;&gt;Splits&lt;/h1&gt;
&lt;p&gt;All under &lt;code&gt;Ctrl + W&lt;/code&gt; are window controls.&lt;/p&gt;
&lt;p&gt;Vertical&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Ctrl + W v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Horizontal&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Ctrl + W s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Equal split&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Ctrl + W =
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Resize horizontally&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:resize 10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Resize vertically&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:vertical resize 20
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>Vim for Firefox</title>
    <link href="https://kleinprojects.com/vim-for-firefox/"/>
    <updated>2020-12-07T00:00:00Z</updated>
    <id>https://kleinprojects.com/vim-for-firefox/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/tridactyl/tridactyl&quot;&gt;Tridactyl&lt;/a&gt; is a Firefox extension to enable vim key bindings for a more efficient browsing experience.&lt;/p&gt;
&lt;p&gt;Go back to tutor&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:tutor
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;modes&quot; tabindex=&quot;-1&quot;&gt;Modes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Normal mode&lt;/li&gt;
&lt;li&gt;Hint mode
&lt;ul&gt;
&lt;li&gt;Enter with &lt;code&gt;f&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Visual mode
&lt;ul&gt;
&lt;li&gt;Enter with &lt;code&gt;v&lt;/code&gt;, &lt;code&gt;;h&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Search via &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Exit via &lt;code&gt;Esc&lt;/code&gt;, &lt;code&gt;&amp;lt;Ctr-[&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Command mode
&lt;ul&gt;
&lt;li&gt;Enter with &lt;code&gt;:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Exit with &lt;code&gt;Esc&lt;/code&gt;, &lt;code&gt;Enter&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ignore mode
&lt;ul&gt;
&lt;li&gt;Pass through key events&lt;/li&gt;
&lt;li&gt;Toggle with &lt;code&gt;Shift-Insert&lt;/code&gt;, &lt;code&gt;Ctrl-Alt-Escape&lt;/code&gt;, &lt;code&gt;Ctrl-Alt-Backtick&lt;/code&gt;, &lt;code&gt;Shift-Esc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;normal-mode&quot; tabindex=&quot;-1&quot;&gt;Normal mode&lt;/h3&gt;
&lt;p&gt;Scroll with &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Go to top with &lt;code&gt;gg&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Got to bottom with &lt;code&gt;G&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Go back in history with &lt;code&gt;H&lt;/code&gt; and forward with &lt;code&gt;L&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;.&lt;/code&gt; to repeat the last action.&lt;/p&gt;
&lt;p&gt;Open new tab with &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Open hinting mode to open tab in background use &lt;code&gt;F&lt;/code&gt; (use &lt;code&gt;f&lt;/code&gt; to open it in same window).&lt;/p&gt;
&lt;p&gt;Focus first textbox on page with &lt;code&gt;gi&lt;/code&gt;. Switch textboxes with &lt;code&gt;tab&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;useful-commands&quot; tabindex=&quot;-1&quot;&gt;Useful commands&lt;/h4&gt;
&lt;p&gt;Bring up list of tabs with &lt;code&gt;b&lt;/code&gt;. Use &lt;code&gt;Tab&lt;/code&gt;, &lt;code&gt;Shift-Tab&lt;/code&gt; to cycle through them.&lt;/p&gt;
&lt;p&gt;Open web pages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;w&lt;/code&gt; open in new window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;o&lt;/code&gt; in current tab&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt; in new tab&lt;/li&gt;
&lt;li&gt;Use capital letters to open current URL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; search&lt;/li&gt;
&lt;li&gt;start search query with search engine like &lt;code&gt;duckduckgo&lt;/code&gt;, or &lt;code&gt;google&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use &lt;code&gt;yy&lt;/code&gt; to copy current URL.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;p&lt;/code&gt; to open clipboard content as a webpage. Use &lt;code&gt;P&lt;/code&gt; to open in a new tab.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quickly search for source of a quote with &lt;code&gt;;p&lt;/code&gt; to copy a paragraph and &lt;code&gt;P&lt;/code&gt; to search it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use &lt;code&gt;zi&lt;/code&gt;, &lt;code&gt;zo&lt;/code&gt;, &lt;code&gt;zz&lt;/code&gt; to zoom in, out, and to reset zoom.&lt;/p&gt;
&lt;p&gt;Search with &lt;code&gt;/&lt;/code&gt;. Navigate through matches with &lt;code&gt;Ctrl-g&lt;/code&gt;, &lt;code&gt;Ctrl-G&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;Ctrl-v&lt;/code&gt; to send next keystroke to website.&lt;/p&gt;
&lt;p&gt;To check what a binding is doing type &lt;code&gt;:bind [keys]&lt;/code&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Logging Exceptions with SLF4J</title>
    <link href="https://kleinprojects.com/logging-exceptions-with-slf4j/"/>
    <updated>2020-12-01T00:00:00Z</updated>
    <id>https://kleinprojects.com/logging-exceptions-with-slf4j/</id>
    <content type="html">&lt;p&gt;Exception logging in SLF4J works without including it in the format:&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;An exception occured&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;my exception&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As opposed to the &lt;code&gt;{}&lt;/code&gt; format notation.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Go Cheat Sheet</title>
    <link href="https://kleinprojects.com/go-cheat-sheet/"/>
    <updated>2020-11-19T00:00:00Z</updated>
    <id>https://kleinprojects.com/go-cheat-sheet/</id>
    <content type="html">&lt;h2 id=&quot;go-lang-tour&quot; tabindex=&quot;-1&quot;&gt;Go Lang Tour&lt;/h2&gt;
&lt;p&gt;This post is my cheat sheet for the (Go Lang Tour)[https://tour.golang.org].&lt;/p&gt;
&lt;p&gt;Package &lt;code&gt;main&lt;/code&gt; runs programs.&lt;/p&gt;
&lt;h2 id=&quot;imports&quot; tabindex=&quot;-1&quot;&gt;Imports&lt;/h2&gt;
&lt;p&gt;Factored Import Statements&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token string&quot;&gt;&quot;math&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;exports&quot; tabindex=&quot;-1&quot;&gt;Exports&lt;/h2&gt;
&lt;p&gt;In Go, a name is exported if it begins with a capital letter.&lt;/p&gt;
&lt;h2 id=&quot;functions&quot; tabindex=&quot;-1&quot;&gt;Functions&lt;/h2&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may omit types if they are equal for consecutive parameters.&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;multiple-results&quot; tabindex=&quot;-1&quot;&gt;Multiple Results&lt;/h3&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;	fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;naked-return&quot; tabindex=&quot;-1&quot;&gt;Naked return&lt;/h3&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sum &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token prism-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token prism-number&quot;&gt;9&lt;/span&gt;&lt;br /&gt;	y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; x&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;variables&quot; tabindex=&quot;-1&quot;&gt;Variables&lt;/h2&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; python&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; java &lt;span class=&quot;token builtin&quot;&gt;bool&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Short declaration with &lt;code&gt;:=&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; j &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token prism-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token prism-number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;	k &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token prism-number&quot;&gt;3&lt;/span&gt;&lt;br /&gt;	c&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; python&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; java &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;no!&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;	fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; j&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; k&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; python&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; java&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;datatypes&quot; tabindex=&quot;-1&quot;&gt;Datatypes&lt;/h2&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token builtin&quot;&gt;bool&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;token builtin&quot;&gt;int8&lt;/span&gt;  &lt;span class=&quot;token builtin&quot;&gt;int16&lt;/span&gt;  &lt;span class=&quot;token builtin&quot;&gt;int32&lt;/span&gt;  &lt;span class=&quot;token builtin&quot;&gt;int64&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;uint8&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;uint16&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;uint32&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;uint64&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;uintptr&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// alias for uint8&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;rune&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// alias for int32&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token comment&quot;&gt;// represents a Unicode code point&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;float32&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;float64&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;complex64&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;complex128&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;conditions-and-loops&quot; tabindex=&quot;-1&quot;&gt;Conditions and Loops&lt;/h1&gt;
&lt;h2 id=&quot;for&quot; tabindex=&quot;-1&quot;&gt;For&lt;/h2&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;sum &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token prism-number&quot;&gt;0&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token prism-number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token prism-number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    sum &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; i&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;for-is-go&#39;s-while&quot; tabindex=&quot;-1&quot;&gt;For is Go&#39;s While&lt;/h2&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token prism-number&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    sum &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; sum&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;defer&quot; tabindex=&quot;-1&quot;&gt;Defer&lt;/h2&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;defer&lt;/span&gt; fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;	fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.golang.org/defer-panic-and-recover&quot;&gt;Further Reading&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;examples&quot; tabindex=&quot;-1&quot;&gt;Examples&lt;/h1&gt;
&lt;p&gt;Read in line:&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Scanln&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err &lt;span class=&quot;token builtin&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;br /&gt;fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Scanln&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;life%2C-the-universe%2C-and-everything&quot; tabindex=&quot;-1&quot;&gt;Life, the Universe, and Everything&lt;/h2&gt;
&lt;p&gt;Read lines until we read &lt;code&gt;42&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; main&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;// your code goes here&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; line &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Scanln&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; line &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;42&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Scanln&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;		fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>A dead simple approach to using SASS in Eleventy</title>
    <link href="https://kleinprojects.com/a-dead-simple-approach-to-using-sass-in-eleventy/"/>
    <updated>2020-08-16T00:00:00Z</updated>
    <id>https://kleinprojects.com/a-dead-simple-approach-to-using-sass-in-eleventy/</id>
    <content type="html">&lt;p&gt;I prefer going with as simple solutions as possible, avoiding the usage of third party packages that always introduce some risk into your project. You don&#39;t know if they are up to date if there are no tests included, you don&#39;t know if they are secure and what packages are attached to them if you don&#39;t check source code.&lt;/p&gt;
&lt;p&gt;So, to include SASS within my Eleventy project I am using only the official &lt;a href=&quot;https://www.npmjs.com/package/sass&quot;&gt;SASS npm package&lt;/a&gt; and the officially included &lt;a href=&quot;https://nodejs.org/api/fs.html&quot;&gt;fs package&lt;/a&gt; of node to write the transpiled files.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.eleventy.js&lt;/code&gt; file contains only three lines within the configuration function to compile SASS into CSS:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sass &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sass&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;compileSass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Compiling sass.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cssContent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sass&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;renderSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;styles/main.scss&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mkdirSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;_site/css&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;recursive&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;writeFileSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;_site/css/main.css&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cssContent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;css&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;styles&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; filepath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Styles file changed&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; filepath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;compileSass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;compileSass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This a a very simple approach without asynchronous code or anything. The only package you need is the npm sass package. They even write that &amp;quot;renderSync() is more than twice as fast as render()&amp;quot; (&lt;a href=&quot;https://www.npmjs.com/package/sass&quot;&gt;SASS npm package&lt;/a&gt;), so you might consider if its worth for you introducing parallel execution.&lt;/p&gt;
&lt;h2 id=&quot;important-note-to-fs.watch&quot; tabindex=&quot;-1&quot;&gt;Important note to fs.watch&lt;/h2&gt;
&lt;p&gt;This script does not work when publishing to GitHub pages automatically as the &lt;code&gt;fs.watch&lt;/code&gt; command will block input. To unblock if Eleventy isn&#39;t run with the &lt;code&gt;--serve&lt;/code&gt; flag we can only enable file watching if we discover that flag like so:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; isServing &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;argv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;--serve&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isServing&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// watch only files if we are serving&lt;/span&gt;&lt;br /&gt;  fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;src/styles&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; filepath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Styles file changed&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; filepath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;compileSass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>Clearing the _site directory in Eleventy automatically</title>
    <link href="https://kleinprojects.com/clearing-the-site-directory-in-eleventy-automatically/"/>
    <updated>2020-08-16T00:00:00Z</updated>
    <id>https://kleinprojects.com/clearing-the-site-directory-in-eleventy-automatically/</id>
    <content type="html">&lt;p&gt;If you want to ensure an always up to date version, with all files being removed you might want to clear your &lt;code&gt;_site&lt;/code&gt; directory before each build. This needs no further packages then the already built in &lt;a href=&quot;https://nodejs.org/api/fs.html&quot;&gt;fs package&lt;/a&gt; of node. The function &lt;code&gt;rmdirSync(folderPath, {recursive:true})&lt;/code&gt; can accomplish excactly this.&lt;/p&gt;
&lt;p&gt;Your .eleventy.js then looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// clear site on initial build&lt;/span&gt;&lt;br /&gt;fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;rmdirSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;_site&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;recursive&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Cleared _site folder&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that we do not export a function as you would normally do it. This is, because we want to &lt;strong&gt;run the folder deletion only once per build or serve&lt;/strong&gt;!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That means, that this code does not block our subsequent building pipeline. However, when you run Eleventy with &lt;code&gt;eleventy serve&lt;/code&gt; you might end up with unwanted files in the end. So always remember to run &lt;code&gt;eleventy build&lt;/code&gt; before publishing your site and you will always get a clean version.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>My journey to using Eleventy as a static website generator</title>
    <link href="https://kleinprojects.com/my-journey-to-using-eleventy-as-a-static-website-generator/"/>
    <updated>2020-08-15T00:00:00Z</updated>
    <id>https://kleinprojects.com/my-journey-to-using-eleventy-as-a-static-website-generator/</id>
    <content type="html">&lt;p&gt;I started renting my first server something like 10 years ago back in school. Initially I merely used it to play around with some new technologies. While studying I launched my first websites including a small blog.&lt;/p&gt;
&lt;p&gt;First I put together a website from scratch to post content into the world wide web. Then I tried out more advanced and feature rich systems like the &lt;a href=&quot;https://ghost.org/&quot;&gt;ghost blogging platform&lt;/a&gt;. However, I always struggled with this one thing: updating the server.&lt;/p&gt;
&lt;p&gt;I only published content and applications sporadically. Therefore, my server kept getting out of date and I killed it before trying to walk through a complex updating process. Often my blog posts and content got lost in that process.&lt;/p&gt;
&lt;p&gt;So its now 2020 and again I killed my server as my last updates happened 2 years ago. Yes, initially I did backups and restored them on my new Ghost blog instance. However, now I am pursuing a more sustainable and lasting approach to keep stuff that I am working on online.&lt;/p&gt;
&lt;p&gt;Of course I also considered hosted blogging platforms like &lt;a href=&quot;https://medium.com/&quot;&gt;Medium&lt;/a&gt;. Nonetheless, I prefer hosting my own stuff and learning new things in the process.&lt;/p&gt;
&lt;h1 id=&quot;static-websites&quot; tabindex=&quot;-1&quot;&gt;Static Websites&lt;/h1&gt;
&lt;p&gt;During my research of a better hosting alternative I stumbled across &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; that allows hosting of websites for free, with SSL encryption. After some investigation I considered this as a valid hosting option for my new website. Building a static website also had the benefit of changing hosting providers quickly as it is only a bunch of HTML and CSS files without the need of backend services.&lt;/p&gt;
&lt;h1 id=&quot;templating-websites&quot; tabindex=&quot;-1&quot;&gt;Templating Websites&lt;/h1&gt;
&lt;p&gt;Building a website with merely HTML and CSS is a pain when you consider the long run. You might want to change some things and have to update layout and styles at lots of different places. Therefore I decided to go with a templating engine. &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; was my first consideration as it is a very popular framework for static website generation. It uses Ruby under its hood and after setup and some tests I quickly figured out that this is not the language I want to host my websites with.&lt;/p&gt;
&lt;h1 id=&quot;eleventy-as-static-website-generator&quot; tabindex=&quot;-1&quot;&gt;Eleventy as Static Website Generator&lt;/h1&gt;
&lt;p&gt;As mostly work with front-end technologies like Typescript or Javascript I searched for an engine that uses excactly these technologies. That was when I discovered &lt;a href=&quot;https://www.11ty.dev/&quot;&gt;Eleventy&lt;/a&gt;, a static website generator built with Javascript and using the &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;package manager NPM&lt;/a&gt; for building.&lt;/p&gt;
&lt;h1 id=&quot;getting-used-to-static-website-generators&quot; tabindex=&quot;-1&quot;&gt;Getting used to Static Website Generators&lt;/h1&gt;
&lt;p&gt;As Eleventy is my first static website generator I have ever worked with, I started reading through the documentation and setting up a very simple website. There are lots of demo projects, however I decided to start from scratch to learn about that technology and all the features it has.&lt;/p&gt;
&lt;p&gt;There are several things I already learned in the process: for example setting up basic fragments that can be reused in other templates, applying CSS, or building a basic post collection.&lt;/p&gt;
&lt;p&gt;So I decided to build a new website from scratch. It should be minimal, show off projects that I am working on, and provide the capability of posting stuff from time to time. It should be easy to maintain (from a coders perspective) and last for a long time.&lt;/p&gt;
</content>
  </entry>
</feed>